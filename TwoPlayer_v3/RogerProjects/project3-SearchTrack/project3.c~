/*************************************************************************/
/* File:        project3.c                                               */
/* Description: User project #3 - SEARCHTRACK                            */
/* Date:        3-06-2014                                                */
/*************************************************************************/
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include "Roger.h"
#include "simulate.h"
#include "control.h"
#include "modes.h"

int sample_gaze_direction(), compute_average_red_pixel();
int stereo_observation();
void draw_observation();

extern Observation obs;

/* RETURN STATUS FOR ALL ACTIONS:                                */
/* 0-"UNKNOWN", 1-"NO_REFERENCE", 2-"TRANSIENT", 3-"CONVERGED" */
/*************************************************************************/
/* SEARCH controller -                                                   */
/* explore samples from the SEARCH distribution for the target red ball  */
/*************************************************************************/
int SEARCH(roger, time)
Robot * roger;
double time;
{
  static double search_heading;
  double heading_error_base;

  static int return_state = UNKNOWN;

  // SAMPLE A NEW REFERENCE HEADING
  if (return_state != TRANSIENT) {
    // sample a new gaze heading from the SEARCH distribution
    if (sample_gaze_direction(&search_heading) == FALSE) {
      return_state = NO_REFERENCE;
    }
    else return_state = TRANSIENT;
  }

  else {
    /***********************************************************************/
    /* PROJECT3 PART I - complete the code to explore sampled              */
    /*    search_heading using base and eyes                               */
    /***********************************************************************/
     heading_error_base = search_heading - roger->base_position[THETA];
     while (heading_error_base > M_PI) heading_error_base -= 2.0 * M_PI;  
     while (heading_error_base < -M_PI) heading_error_base += 2.0 * M_PI;
    
    /*define new setpoints for the base and the eyes                      */
     roger->base_setpoint[THETA] =  search_heading;
     roger->eyes_setpoint[LEFT] =   heading_error_base - roger->eye_theta[LEFT];
     roger->eyes_setpoint[RIGHT] =  heading_error_base - roger->eye_theta[RIGHT];

    // check for CONVERGE
    if ( fabs(heading_error_base) < 0.01) 
      return_state = CONVERGED; //Converged on its position not the ball

    /***********************************************************************/
    /* PROJECT3 PART I - END                                               */
    /***********************************************************************/
  }
 //  printf("      returning from search\n"); fflush(stdout);
  return(return_state);
}

/*************************************************************************/
// primitive TRACK controller - TRACK the red ball with base and eyes
/*************************************************************************/
int TRACK(roger, time)
Robot* roger;
double time;

  double ul, ur, error_eye[2], error_base;
  static int return_state = UNKNOWN;
  // control eyes independently and triangulate is ball is visible in both eyes
  if (compute_average_red_pixel(roger, &ur, &ul) == TRUE) {
    /***********************************************************************/
    /* PROJECT3 PART II - complete the code to TRACK the red ball          */
    /*    that using base and eyes                                         */
    /***********************************************************************/
    error_eye[LEFT] = atan2((ul-63.5), 64.0);
    error_eye[RIGHT] = atan2((ur-63.5), 64.0);
    // define eye setpoints
     roger->eyes_setpoint[LEFT] =  roger->eye_theta[LEFT] + error_eye[LEFT];
     roger->eyes_setpoint[RIGHT] = roger->eye_theta[RIGHT] + error_eye[RIGHT];  
    // define base setpoints
     error_base =  ((roger->eye_theta[LEFT] + error_eye[LEFT] + roger->eye_theta[RIGHT] + error_eye[RIGHT]))/2.0;
     roger->base_setpoint[THETA] = roger->base_position[THETA] + error_base;
    // check for CONVERGE
    if ((fabs(error_eye[LEFT]) < 0.1) && (fabs(error_eye[RIGHT]) < 0.1) &&
	(fabs(error_base) < 0.1)) {
      return_state = CONVERGED;
    }
    else { return_state = TRANSIENT; };
    stereo_observation(roger, &obs); // in project2-Kinematics/vision.c
    /***********************************************************************/
    /* PROJECT3 PART II - END                                              */
    /***********************************************************************/
  }
  else {
    // No ball in view -> no reference
    return_state = NO_REFERENCE;
  }
  return(return_state);
}

/*************************************************************************/
// SEARCH/TRACK the red ball using primitive SEARCH and TRACK controllers
/*************************************************************************/
int SEARCHTRACK(roger, time)
Robot *roger;
double time;
{
  static int return_state = UNKNOWN;
  static int internal_state[2] = { UNKNOWN, UNKNOWN };//[0]->SEARCH [1]->TRACK
  int i, state;

    //printf("   in searchtrack\n");

/* RETURN STATUS FOR ALL ACTIONS:                                */
/* 0-"UNKNOWN", 1-"NO_REFERENCE", 2-"TRANSIENT", 3-"CONVERGED" */
  /**********************************************************************/
  /* PROJECT3 PART III - the FSA for SEARCHTRACK                        */
  /*    internal_state=[ 0:SEARCH 1:TRACK ]                             */ 
  /**********************************************************************/
  state = internal_state[1]*4 + internal_state[0];
  switch (state) {
    // the example shows an aggregate "X" that produces the same actions
    //    for all 4 SEARCH return values
                                                                                            //TRACK        SEARCH
                     /**     Node 0 Go to search   **/
  case 0: (internal_state[1] == UNKNOWN  && internal_state[0] == UNKNOWN);               //  UNKNOWN   -  UNKNOWN      
  case 1: (internal_state[1] == UNKNOWN  && internal_state[0] == NO_REFERENCE);          //  UNKNOWN   - NO_REFERENCE
  case 2: (internal_state[1] == UNKNOWN  && internal_state[0] == TRANSIENT);             //  UNKNOWN   -  TRANSIENT
  case 3: (internal_state[1] == UNKNOWN  && internal_state[0] == CONVERGED);             //  UNKNOWN   -  CONVERGED
                                                                               //   Doesnt break focus but dont like it here 
 // printf("            Search Track at Node 0\n");
     return_state =  TRACK(roger , time);
    // set return values by hand or execute SEARCH()/TRACK() to return them
     internal_state[0] = SEARCH(roger, time);
     internal_state[1] = TRACK(roger, time);
    break;
                   /**  Track has no reference to the ball --> Search  **/
  case 4: (internal_state[1] == NO_REFERENCE &&  internal_state[0] == UNKNOWN);           // NO_REFERENCE -  UNKNOWN
         //      printf("   case 4 unknown  , no ref\n");
              //SEARCH(roger , time); 
  case 5: (internal_state[1] == NO_REFERENCE && internal_state[0] == NO_REFERENCE);      // NO_REFERENCE - NO_REFERENCE
          //    printf("   case 5 no ref  , no ref\n");
             // SEARCH(roger , time);
  case 6: (internal_state[1] == NO_REFERENCE && internal_state[0] == TRANSIENT);         // NO_REFERENCE -  TRANSIENT
        //     printf("   case 6 transient  , no ref\n");
  case 7: (internal_state[1] == NO_REFERENCE && internal_state[0] == CONVERGED);         // NO_REFERENCE -  CONVERGED
       //     printf("    case 7 converged  , no ref\n");
  //  printf("   Search Track at Node1\n"); 
    return_state = SEARCH(roger , time); 
    // set return values by hand or execute SEARCH()/TRACK() to return them
     internal_state[0] = SEARCH(roger , time);
     internal_state[1] = TRACK(roger , time);
    break;

  case 8:  (internal_state[1] == TRANSIENT && internal_state[0] == UNKNOWN);         //  TRANSIENT   -  UNKNOWN
  case 9:  (internal_state[1] == TRANSIENT && internal_state[0] == NO_REFERENCE);    //  TRANSIENT   - NO_REFERENCE
  case 10: (internal_state[1] == TRANSIENT && internal_state[0] == TRANSIENT);       //  TRANSIENT   -  TRANSIENT
  case 11: (internal_state[1] == TRANSIENT && internal_state[0] == CONVERGED);       //  TRANSIENT   -  CONVERGED
 //   printf("  Search Track at Node 2  Ball is found Track is now in motion\n"); 
     return_state = TRACK(roger , time);
    // set return values by hand or execute SEARCH()/TRACK() to return them
     internal_state[0] =  SEARCH(roger ,time);
     internal_state[1] =  TRACK(roger  ,time);
    break;
  case 12: (internal_state[1] == CONVERGED && internal_state[0] == UNKNOWN);            //  CONVERGED   -  UNKNOWN
  case 13: (internal_state[1] ==CONVERGED && internal_state[0] == NO_REFERENCE);       //  CONVERGED   - NO_REFERENCE
  case 14: (internal_state[1] == CONVERGED && internal_state[0] == TRANSIENT);          //  CONVERGED   -  TRANSIENT
  case 15: (internal_state[1] == CONVERGED && internal_state[0] == CONVERGED);          //  CONVERGED   -  CONVERGED
  //   printf("     Search Track at Node 4 Ball is now being dead center\n");
	//SEARCH(roger,time);  
  return_state = TRACK(roger , time); 
    // set return values by hand or execute SEARCH()/TRACK() to return them
     internal_state[0] = SEARCH(roger , time);
     internal_state[1] = TRACK(roger , time);
    break;
  default:
    break;
  }
  /***********************************************************************/
  /* PROJECT3 PART III - END                                             */
  /***********************************************************************/
  return(return_state);
}

/*************************************************************************/
/* project development interface - called by GUI                         */
/*************************************************************************/
void project3_control(roger,time)
Robot * roger;
double time;
{
  static int state = UNKNOWN;

 // printf(" TESTING roger eye set points Left: %lf , Right: %lf\n" , roger->eye_theta[LEFT] , roger->eye_theta[RIGHT]);
    printf("%lf,%lf\n",time,(roger->base_setpoint[THETA] - roger->base_position[THETA]));
 // printf("SEARCHTRACK state=%d\n", SEARCHTRACK(roger, time));
   SEARCHTRACK(roger,time);
}

/*************************************************************************/
void project3_reset(roger)
Robot* roger;
{ }

void project3_visualize(roger)
Robot* roger;
{
  //void draw_observations();
  //draw_observation(obs);
}

/*************************************************************************/
// prompt for and read user customized input values
/*************************************************************************/
void project3_enter_params() 
{
  printf("Project 3 enter_params called. \n");
}
